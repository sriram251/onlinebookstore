// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Console;
using onlinebookstorev1._0.Modals;

namespace onlinebookstorev1._0
{
    public partial class BookstoreContext : IdentityDbContext<AppUser, IdentityRole,string>
    {

        
        public BookstoreContext(DbContextOptions<BookstoreContext> options)
            : base(options)
        {
        }
        public virtual DbSet<AppUser> Users { get; set; }
        public virtual DbSet<Imagescroller> Imagescrollers { get; set; }
        public virtual DbSet<PeopleAddress> Addresses { get; set; }
        public virtual DbSet<Authers> Authers { get; set; }
        public virtual DbSet<AuthersBook> AuthersBook { get; set; }
        public virtual DbSet<Books> Books { get; set; }
        public virtual DbSet<CoverImages> CoverImages { get; set; }
        public virtual DbSet<BooksCategorie> BooksCategorie { get; set; }
        public virtual DbSet<dimensions> dimension { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        
        public virtual DbSet<products> Products { get; set; }
        public virtual DbSet<usersCart> UsersCarts { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.Entity<AppUser>(entity =>
            {
                entity.HasMany(s => s.Carts);
                
            });
            modelBuilder.Entity<usersCart>(entity =>
            {
                entity.HasKey(s => new { s.BookId, s.user_Id });
            });
            modelBuilder.Entity<usersCart>().HasOne(s => s.user).WithMany(s => s.Carts).HasForeignKey(s => s.user_Id);
            
            modelBuilder.Entity<products>(entity =>
            {
                entity.HasKey(s => s.Product_Id);
                
            });
            modelBuilder.Entity<PeopleAddress>(entity =>
            {
                entity.HasKey(s => s.Address_Id);

            });
            modelBuilder.Entity<Categories>(entity =>
            {
                entity.HasKey(e => e.CategorieId);
                entity.HasIndex(e => e.Categorie).IsUnique();
                entity.Property(e => e.CategorieId).HasColumnName("CategorieId");
            });
            modelBuilder.Entity<Authers>(entity =>
            {
                entity.HasKey(e => e.AutherId)
                    .HasName("PK__Authers__64814E97059BD37B");

                entity.HasIndex(e => e.AutherName)
                    .HasName("UQ__Authers__2D4B0E49AD53BD6F")
                    .IsUnique();

                entity.Property(e => e.AutherId).HasColumnName("Auther_Id");

                entity.Property(e => e.AutherName)
                    .IsRequired()
                    .HasMaxLength(50);
            });
            modelBuilder.Entity<PeopleAddress>(entity =>
            {
                entity.HasKey(e => e.Address_Id);
            });
            modelBuilder.Entity<BooksCategorie>(entity =>
            {
                entity.HasKey(e => new { e.BookId, e.CategorieId });
                entity.Property(e => e.BookId).HasColumnName("BookId");

                entity.Property(e => e.CategorieId).HasColumnName("CategorieId");

                
                    
            });
            modelBuilder.Entity<AuthersBook>(entity =>
            {
                entity.HasKey(e=> new { e.AutherId,e.BookId});

                entity.Property(e => e.AutherId).HasColumnName("Auther_Id");

                entity.Property(e => e.BookId).HasColumnName("book_id");

 
                   
            });

            modelBuilder.Entity<Books>(entity =>
            {
                entity.HasKey(e => e.BookId)
                    .HasName("PK__books__490D1AE1E48DEBA3");

                entity.ToTable("books");

                entity.HasIndex(e => e.Title)
                    .HasName("UQ__books__E52A1BB38335A223")
                    .IsUnique();

                entity.Property(e => e.BookId).HasColumnName("book_id");

                entity.Property(e => e.CoverImageId).HasColumnName("coverImage_Id");

                entity.Property(e => e.dimension_Id).HasColumnName("dimension_Id");

                entity.Property(e => e.PublishedDate)
                    .HasColumnName("published_date")
                    .HasColumnType("date");


                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(100);
                entity.Property(e=>e.ISBN).IsRequired().HasColumnName("ISBN").HasMaxLength(20);


            });

            modelBuilder.Entity<CoverImages>(entity =>
            {
                entity.HasKey(e => e.CoverImageId)
                    .HasName("PK__CoverIma__CBBA9DB76C3A400C");

                entity.Property(e => e.CoverImageId).HasColumnName("coverImage_Id");

                entity.Property(e => e.Coverimage)
                    .IsRequired()
                    .HasColumnName("coverimage");
                    
            });
            modelBuilder.Entity<dimensions>(entity =>
            {
                entity.HasKey(e => e.dimension_Id)
                    .HasName("PK__dimension_Id");

                entity.Property(e => e.dimension_Id).HasColumnName("dimension_Id");

                

            });


            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}